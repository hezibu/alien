// Generated by rstantools.  Do not edit by hand.

/*
    alien is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    alien is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with alien.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_modified_belmaker_et_al_2009_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 43> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 30, column 2 to column 10)",
  " (in 'string', line 31, column 2 to column 10)",
  " (in 'string', line 34, column 2 to column 36)",
  " (in 'string', line 35, column 2 to column 57)",
  " (in 'string', line 48, column 2 to column 84)",
  " (in 'string', line 36, column 2 to column 47)",
  " (in 'string', line 38, column 4 to column 80)",
  " (in 'string', line 37, column 16 to line 39, column 3)",
  " (in 'string', line 37, column 2 to line 39, column 3)",
  " (in 'string', line 42, column 2 to column 68)",
  " (in 'string', line 44, column 2 to column 29)",
  " (in 'string', line 45, column 2 to column 30)",
  " (in 'string', line 7, column 2 to column 20)",
  " (in 'string', line 8, column 2 to column 31)",
  " (in 'string', line 9, column 8 to column 9)",
  " (in 'string', line 9, column 2 to column 30)",
  " (in 'string', line 10, column 8 to column 9)",
  " (in 'string', line 10, column 2 to column 30)",
  " (in 'string', line 11, column 8 to column 9)",
  " (in 'string', line 11, column 2 to column 17)",
  " (in 'string', line 12, column 2 to column 13)",
  " (in 'string', line 13, column 2 to column 13)",
  " (in 'string', line 14, column 2 to column 13)",
  " (in 'string', line 15, column 2 to column 13)",
  " (in 'string', line 18, column 8 to column 9)",
  " (in 'string', line 18, column 2 to column 40)",
  " (in 'string', line 19, column 8 to column 9)",
  " (in 'string', line 19, column 2 to column 45)",
  " (in 'string', line 20, column 8 to column 9)",
  " (in 'string', line 20, column 2 to column 38)",
  " (in 'string', line 21, column 8 to column 9)",
  " (in 'string', line 21, column 2 to column 38)",
  " (in 'string', line 22, column 2 to column 34)",
  " (in 'string', line 23, column 2 to column 34)",
  " (in 'string', line 25, column 4 to column 51)",
  " (in 'string', line 26, column 4 to column 41)",
  " (in 'string', line 24, column 16 to line 27, column 3)",
  " (in 'string', line 24, column 2 to line 27, column 3)",
  " (in 'string', line 34, column 20 to column 21)",
  " (in 'string', line 48, column 8 to column 9)",
  " (in 'string', line 3, column 4 to column 34)",
  " (in 'string', line 2, column 49 to line 4, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
antiderivative(const T0__& b0, const T1__& b1, const int& time, std::ostream*
               pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
antiderivative(const T0__& b0, const T1__& b1, const int& time, std::ostream*
               pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 41;
    return (stan::math::exp((b0 + (b1 * time))) / b1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_modified_belmaker_et_al_2009_model final : public model_base_crtp<model_modified_belmaker_et_al_2009_model> {
private:
  int N;
  int native_total;
  std::vector<int> dI;
  std::vector<int> dN;
  std::vector<int> t;
  double b0_mu;
  double b1_mu;
  double b0_sd;
  double b1_sd;
  std::vector<int> unrecorded_N;
  std::vector<int> yearly_detections;
  std::vector<int> recorded_I;
  std::vector<int> recorded_N;
public:
  ~model_modified_belmaker_et_al_2009_model() {}
  model_modified_belmaker_et_al_2009_model(stan::io::var_context& context__,
                                           unsigned int random_seed__ = 0,
                                           std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_modified_belmaker_et_al_2009_model_namespace::model_modified_belmaker_et_al_2009_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 13;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "native_total", "int",
        std::vector<size_t>{});
      native_total = std::numeric_limits<int>::min();
      current_statement__ = 14;
      native_total = context__.vals_i("native_total")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "native_total",
        native_total, 1);
      current_statement__ = 15;
      stan::math::validate_non_negative_index("dI", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "dI", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      dI = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 16;
      dI = context__.vals_i("dI");
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "dI", dI, 0);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("dN", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "dN", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      dN = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 18;
      dN = context__.vals_i("dN");
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "dN", dN, 0);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("t", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      t = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 20;
      t = context__.vals_i("t");
      current_statement__ = 21;
      context__.validate_dims("data initialization", "b0_mu", "double",
        std::vector<size_t>{});
      b0_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 21;
      b0_mu = context__.vals_r("b0_mu")[(1 - 1)];
      current_statement__ = 22;
      context__.validate_dims("data initialization", "b1_mu", "double",
        std::vector<size_t>{});
      b1_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 22;
      b1_mu = context__.vals_r("b1_mu")[(1 - 1)];
      current_statement__ = 23;
      context__.validate_dims("data initialization", "b0_sd", "double",
        std::vector<size_t>{});
      b0_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 23;
      b0_sd = context__.vals_r("b0_sd")[(1 - 1)];
      current_statement__ = 24;
      context__.validate_dims("data initialization", "b1_sd", "double",
        std::vector<size_t>{});
      b1_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 24;
      b1_sd = context__.vals_r("b1_sd")[(1 - 1)];
      current_statement__ = 25;
      stan::math::validate_non_negative_index("unrecorded_N", "N", N);
      current_statement__ = 26;
      unrecorded_N = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 27;
      stan::math::validate_non_negative_index("yearly_detections", "N", N);
      current_statement__ = 28;
      yearly_detections = std::vector<int>(N,
                            std::numeric_limits<int>::min());
      current_statement__ = 29;
      stan::math::validate_non_negative_index("recorded_I", "N", N);
      current_statement__ = 30;
      recorded_I = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 31;
      stan::math::validate_non_negative_index("recorded_N", "N", N);
      current_statement__ = 32;
      recorded_N = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 33;
      stan::model::assign(recorded_I, stan::math::cumulative_sum(dI),
        "assigning variable recorded_I");
      current_statement__ = 34;
      stan::model::assign(recorded_N, stan::math::cumulative_sum(dN),
        "assigning variable recorded_N");
      current_statement__ = 38;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 35;
        stan::model::assign(unrecorded_N, (native_total -
          stan::model::rvalue(recorded_N, "recorded_N",
            stan::model::index_uni(i))), "assigning variable unrecorded_N",
          stan::model::index_uni(i));
        current_statement__ = 36;
        stan::model::assign(yearly_detections,
          (stan::model::rvalue(dI, "dI", stan::model::index_uni(i)) +
          stan::model::rvalue(dN, "dN", stan::model::index_uni(i))),
          "assigning variable yearly_detections", stan::model::index_uni(i));
      }
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "unrecorded_N",
        unrecorded_N, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "yearly_detections",
        yearly_detections, 0);
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "recorded_I",
        recorded_I, 0);
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "recorded_N",
        recorded_N, 0);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("unrecorded_I", "N", N);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("y", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_modified_belmaker_et_al_2009_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_modified_belmaker_et_al_2009_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ b0 = DUMMY_VAR__;
      current_statement__ = 1;
      b0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ b1 = DUMMY_VAR__;
      current_statement__ = 2;
      b1 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> unrecorded_I =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ first_year = DUMMY_VAR__;
      current_statement__ = 4;
      first_year = antiderivative(b0, b1, 0, pstream__);
      current_statement__ = 6;
      stan::model::assign(unrecorded_I, (first_year -
        stan::model::rvalue(recorded_I, "recorded_I",
          stan::model::index_uni(1))), "assigning variable unrecorded_I",
        stan::model::index_uni(1));
      current_statement__ = 9;
      for (int i = 2; i <= N; ++i) {
        current_statement__ = 7;
        stan::model::assign(unrecorded_I,
          ((antiderivative(b0, b1,
              stan::model::rvalue(t, "t", stan::model::index_uni(i)),
              pstream__) - first_year) -
          stan::model::rvalue(recorded_I, "recorded_I",
            stan::model::index_uni(i))), "assigning variable unrecorded_I",
          stan::model::index_uni(i));
      }
      current_statement__ = 3;
      stan::math::check_greater_or_equal(function__, "unrecorded_I",
        unrecorded_I, 0);
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "first_year",
        first_year, 0);
      {
        current_statement__ = 10;
        lp_accum__.add(stan::math::beta_binomial_lpmf<propto__>(dI,
                         yearly_detections, unrecorded_I, unrecorded_N));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b0, b0_mu, b0_sd));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b1, b1_mu, b1_sd));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_modified_belmaker_et_al_2009_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double b0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      b0 = in__.template read<local_scalar_t__>();
      double b1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      b1 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> unrecorded_I =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double first_year = std::numeric_limits<double>::quiet_NaN();
      out__.write(b0);
      out__.write(b1);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 4;
      first_year = antiderivative(b0, b1, 0, pstream__);
      current_statement__ = 6;
      stan::model::assign(unrecorded_I, (first_year -
        stan::model::rvalue(recorded_I, "recorded_I",
          stan::model::index_uni(1))), "assigning variable unrecorded_I",
        stan::model::index_uni(1));
      current_statement__ = 9;
      for (int i = 2; i <= N; ++i) {
        current_statement__ = 7;
        stan::model::assign(unrecorded_I,
          ((antiderivative(b0, b1,
              stan::model::rvalue(t, "t", stan::model::index_uni(i)),
              pstream__) - first_year) -
          stan::model::rvalue(recorded_I, "recorded_I",
            stan::model::index_uni(i))), "assigning variable unrecorded_I",
          stan::model::index_uni(i));
      }
      current_statement__ = 3;
      stan::math::check_greater_or_equal(function__, "unrecorded_I",
        unrecorded_I, 0);
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "first_year",
        first_year, 0);
      if (emit_transformed_parameters__) {
        out__.write(unrecorded_I);
        out__.write(first_year);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<int> y =
        std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 5;
      stan::model::assign(y,
        stan::math::beta_binomial_rng(yearly_detections, unrecorded_I,
          unrecorded_N, base_rng__), "assigning variable y");
      out__.write(y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ b0 = DUMMY_VAR__;
      current_statement__ = 1;
      b0 = in__.read<local_scalar_t__>();
      out__.write(b0);
      local_scalar_t__ b1 = DUMMY_VAR__;
      current_statement__ = 2;
      b1 = in__.read<local_scalar_t__>();
      out__.write(b1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "b0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "b1", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ b0 = DUMMY_VAR__;
      current_statement__ = 1;
      b0 = context__.vals_r("b0")[(1 - 1)];
      out__.write(b0);
      local_scalar_t__ b1 = DUMMY_VAR__;
      current_statement__ = 2;
      b1 = context__.vals_r("b1")[(1 - 1)];
      out__.write(b1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"b0", "b1"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"unrecorded_I", "first_year"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "b0");
    param_names__.emplace_back(std::string() + "b1");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "unrecorded_I" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "first_year");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "b0");
    param_names__.emplace_back(std::string() + "b1");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "unrecorded_I" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "first_year");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "y" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"b0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"unrecorded_I\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"first_year\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"b0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"unrecorded_I\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"first_year\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + 1);
    const size_t num_transformed = emit_transformed_parameters * ((N + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + 1);
    const size_t num_transformed = emit_transformed_parameters * ((N + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_modified_belmaker_et_al_2009_model_namespace::model_modified_belmaker_et_al_2009_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_modified_belmaker_et_al_2009_model_namespace::profiles__;
}
#endif
#endif
